- hosts: localhost
  gather_facts: yes
  vars:
      chassis_password:  "{{ instackenv_content.nodes[0].pm_password }}"
      osp_rhel_mapping:
        10: 7.7
        13: 7.9
        14: 7.7
        15: 8.0
        16: 8.1
        16.1: 8.2
        16.2: 8.4
  tasks:
    - name: set async_install to empty list
      set_fact:
        async_install: []

    - name: install os on undercloud node
      vars:
        needed_os: "RHEL {{ osp_rhel_mapping[osp_release|float] }}"
        hypervisor_host: "{{ undercloud_hostname }}"
        hypervisor_password: "{{ ansible_ssh_pass }}"
      include_tasks: tasks/install_os.yml

    - name: Wait for undercloud to be available
      async_status:
        jid: "{{ item }}"
      register: install_uc
      until: install_uc.finished
      retries: 300
      delay: 10
      with_items: "{{ async_install }}"

    - include_tasks: tasks/get_interpreter.yml
      vars:
        hostname: "{{ undercloud_hostname }}"
        user: "root"
      ignore_errors: yes

    - include_tasks: tasks/update_repo.yml
      when: osp_release == 13 or 16.2

      ## This block of task execute when condition meet for 13 and 16.2
    - block:
        - name: update os to RHEL 7.9
          shell: |
             rhos-release 13 -p passed_phase2 -r 7.9;
             yum update -y
          delegate_to: "{{ undercloud_hostname }}"
          vars:
            ansible_python_interpreter: "{{ python_interpreter }}"
            ansible_user: "root"
        when: osp_release == 13

        - name: update os to RHEL 8.4
          shell: |
             rhos-release 16.2 -p passed_phase2 -r 8.4;
             dnf -y module disable virt:rhel container-tools:rhel8;
             dnf -y module enable virt:av container-tools:2.0;
             dnf update -y;
          delegate_to: "{{ undercloud_hostname }}"
          vars:
            ansible_python_interpreter: "{{ python_interpreter }}"
            ansible_user: "root"
        when: osp_release == 16.2

    - name: list oc_instackenv_content
      shell: |
        echo "{{ (oc_instackenv_content.nodes[item | int].pm_addr | replace('mgmt-','') | replace('-drac', '')) }}"
      with_sequence: 0-{{ (oc_instackenv_content.nodes|length - 1) }}
      register: host_list

    - name: Clear redfish job queues
      shell: |
        source {{ badfish_venv }}/bin/activate
        python3 badfish.py -H mgmt-{{ item[1].stdout }}  -u quads -p {{ chassis_password }} --clear-jobs --force
      args:
        chdir: "{{ ansible_user_dir }}/badfish/src/badfish"
      when: lab_name in ['scale', 'alias'] and vendors is defined and item[0] == "dell"
      with_together:
        - "{{ vendors }}"
        - "{{ host_list.results }}"
      register: clear_jobs
      until: clear_jobs is succeeded
      retries: 3
      delay: 30

    - name: Wait for iDrac to be responsive
      shell: |
        source {{ badfish_venv }}/bin/activate
        python3 badfish.py -H mgmt-{{ item[1].stdout }}  -u quads -p {{ chassis_password }} -i "{{ ansible_user_dir }}/badfish/config/idrac_interfaces.yml" --check-boot
      args:
        chdir: "{{ ansible_user_dir }}/badfish/src/badfish"
      when: lab_name in ['scale', 'alias'] and vendors is defined and item[0] == "dell"
      with_together:
        - "{{ vendors }}"
        - "{{ host_list.results }}"
      register: wait_for_idrac
      until: wait_for_idrac is succeeded
      retries: 20
      delay: 30

    - name: Set the boot order to director mode (Dell)
      shell: |
        source {{ badfish_venv }}/bin/activate
        python3 badfish.py -H mgmt-{{ item[1].stdout }}  -u quads -p {{ chassis_password }} -i "{{ ansible_user_dir }}/badfish/config/idrac_interfaces.yml" -t director
      args:
        chdir: "{{ ansible_user_dir }}/badfish/src/badfish"
      when: lab_name in ['scale', 'alias'] and vendors is defined and item[0] == "dell"
      with_together:
        - "{{ vendors }}"
        - "{{ host_list.results }}"
      retries: 5
      delay: 3
      register: result
      until: result.rc == 0

    - name: power cycle overcloud nodes (Dell)
      shell: |
        source {{ badfish_venv }}/bin/activate
        python3 badfish.py -H mgmt-{{ item[1].stdout }}  -u quads -p {{ chassis_password }} --power-cycle
      args:
        chdir: "{{ ansible_user_dir }}/badfish/src/badfish"
      when: lab_name in ['scale', 'alias'] and vendors is defined and item[0] == "dell"
      with_together:
        - "{{ vendors }}"
        - "{{ host_list.results }}"

    - name: Check if stack user exists
      shell: |
        ssh -o 'PreferredAuthentications=publickey' -o 'StrictHostKeyChecking=no' -o 'UserKnownHostsFile=/dev/null' -i ~/.ssh/id_rsa stack@{{ undercloud_hostname }} 'echo success'
      register: test_user
      ignore_errors: true
      changed_when: false

    - name: check if stack user need to be created in undercloud
      set_fact:
        create_user: True
      when: test_user.stdout != "success"

- import_playbook: prepare_undercloud.yml
  when: hostvars['localhost']['create_user'] is defined
